require('dotenv').config();
console.log("URI MongoDB =", process.env.MONGO_URI);
console.log("Email =", process.env.EMAIL_USER);
/*************************************************************************
*   Chargement des modules n√©cessaires au fonctionnement du serveur      *
*                et Configuration du serveur express                     *                                                                                                 *
**************************************************************************/

// Chargement des modules n√©cessaires au fonctionnement du serveur
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');


const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
     user: process.env.EMAIL_USER,
     pass: process.env.EMAIL_PASS
}
});
// Configuration du serveur express
const app = express();

app.use(express.static('.'));
app.use(bodyParser.json());
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));

// D√©finir la route http://127.0.0.1:3000/ pour index.html
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Le serveur Express √©coute sur le port 3000
app.listen(3000, () => {
    console.log('Le serveur est en √©coute sur le port 3000');
});




/*********************************************************************
*  --Todo 1--   Connexion √† la base de donn√©es MongoDB (SpaceX)      *                                                                                             
*                                                                    *      ---commit -m "Todo 1"---
* Document ressource:   https://mongoosejs.com/docs/connections.html *                                                                                                                                           
**********************************************************************/

// Connexion √† la base de donn√©es
mongoose.connect(process.env.MONGO_URI)

/********************************************************************************
*  --Todo 2--      V√©rification de la connexion √† la base de donn√©es SpaceX     *                                                                                         
*                                                                               *       ---commit -m "Todo 2"---
* Document ressource:   https://youtu.be/V8dYGNfHjfk?si=1TEKPUPoA8ayLmEs        *                                                                                                                                           
*********************************************************************************/

// V√©rification de la connexion √† la base de donn√©es
.then(()=>{
  console.log("mongodb connected");
})
.catch(()=>{
  console.log("failed to connect");
})




  /********************************************************************************
  *  --Todo 3--      Cr√©ation du model schema pour la collection users            *                                                                                         
  *                   !!!!! Vous n'avez qu'√† compl√©ter le schema !!!!!            *     ---commit -m "Todo 3"---
  * Document ressource:   https://mongoosejs.com/docs/guide.html                  *                                                                                                                                           
  *********************************************************************************/
  
  // Cr√©ation du model schema pour la collection users 
  // Compl√©tez le mod√©le selon les besoins de votre formulaire 

  const userSchema=new mongoose.Schema({
    name:String,
    firstName:String,
    email:String,
    password:String,
  })
  

  // Cr√©ation du model mongoose pour l'intereaction avec la base de donn√©es SpaceX (https://mongoosejs.com/docs/api/model.html#Model())
  const User = mongoose.model('User', userSchema);
  
    
  /*****************************************************************************************************************************
  *  --Todo 4--      Cr√©ation d'une route HTTPavec la m√©thode "POST" pour r√©cup√©rer les donn√©es du formulaire d'inscription    *                                                                                         
  *                                                                                                                            *   ---commit -m "Todo 4"---
  * Document ressource:   https://docs.google.com/presentation/d/1cQR0cyTpMT2oYpIXWPNOmK55C_Fr8fycB5ApvrytADY/edit?usp=sharing *                                                                                                                                           
  ******************************************************************************************************************************/
  
  // D√©finition de l'itin√©raire d'inscription et chargement de donn√©es √† partir du formulaire d'inscription
  
    app.post('/signup', async (req, res) => {
        let name = req.body.name;
        let firstName = req.body.firstName;
        let email = req.body.email;
        let password = req.body.password;


  /****************************************************************************************
  *  --Todo 4-1--       V√©rifiez que tous champs du formulaire sont compl√©t√©s             *   ---commit -m "Todo 4-1"---                                                                                      
  *                                                                                       *
  *****************************************************************************************/
   
  // V√©rification des champs requis
    if (!name || !firstName || !email || !password)
        return res.status(400).send('Tous les champs doivent √™tre remplis');
    



  /********************************************************************************
  *  --Todo 4-2--                Cr√©ez un nouvel utilisateur                      *      ---commit -m "Todo 4-2"---                                                                                     
  *                                                                               *                                                                                                                                  
  *********************************************************************************/

     // V√©rifie si un utilisateur avec le m√™me email existe d√©j√†
    const existingUser = await User.findOne({ email: email });
    if (existingUser) {
        return res.status(409).send('Cet adresse e-mail est d√©j√† utilis√©e.');
    }

    // Cr√©ation d'un nouvel utilisateur
    const newUser = new User({
        name: name,
        firstName: firstName,
        email: email,
        password: await bcrypt.hash(password, 10),
});
-

  /********************************************************************************
  *  --Todo 4-3--   Enregistez le nouveau utilisateur dans la base de donn√©es     *            ---commit -m "Todo 4-3"---                                                                             
  *                                                                               *                                                                                                                                          
  *********************************************************************************/

    // Sauvegarde du nouvel utilisateur dans la base de donn√©es
    
    await newUser.save();


  /*********************************************************************************
  *  --Todo 4-4--  Affichez sur la console un message pour une inscription r√©ussie *        ---commit -m "Todo 4-4"---                                                                                    
  *                Red√©rigiez l'utilisateur vers la page "inscription-r√©ussie"     *
  **********************************************************************************/

// Redirection vers la page d'inscription r√©ussie
  const mailOptions = {
    from: 'encryptix4@gmail.com',
    to: email,
    subject: 'Bienvenue sur Encryptix ‚Äì Prot√©gez vos documents en toute s√©curit√©',
    text: `Bonjour ${firstName},\n\nMerci de vous √™tre inscrit sur Encryptix !

Vous avez maintenant acc√®s √† une solution simple, rapide et s√©curis√©e pour chiffrer et prot√©ger tous vos documents sensibles.

üîê Ce que vous pouvez faire d√®s maintenant :
- Chiffrer vos documents en quelques clics
- Stocker et partager en toute s√©curit√©
- Garder le contr√¥le total sur vos donn√©es

Si vous avez la moindre question ou besoin d'aide, notre √©quipe est l√† pour vous accompagner.

Encore bienvenue,
L‚Äô√©quipe Encryptix`
};

  transporter.sendMail(mailOptions, (error, info) => {
    console.log(`Tentative d'envoi de mail √† : ${email}`);
      if (error) {
          console.error('Erreur lors de l\'envoi du mail :', error);
      } else {
          console.log('E-mail envoy√© : ' + info.response);
      }
 });
  console.log("Enregistrement r√©ussie");
  return res.redirect('index2.html');

});
/*});
  /******************************************************************************************************************** 
  *  --Todo 5--  Cr√©ation d'une route HTTPavec la m√©thode "POST" pour v√©rifier les donn√©es du formulaire de connexion *                                                                                         
  *                                                                                                                   *    ---commit -m "Todo 5"---
  * Document ressource:  Maintenant c'est √† vous de coder la partie singin                                            *                                                                                                                                           
  *********************************************************************************************************************/

  app.post('/signin', async (req, res) => {
    const { email, password } = req.body;

    // V√©rifie que les champs ne sont pas vides
    if (!email || !password) {
        return res.status(400).send('Email et mot de passe requis.');
    }

    try {
        // Recherche l'utilisateur dans la base de donn√©es
        const user = await User.findOne({ email: email });

        if (!user) {
            return res.status(401).send('Utilisateur non trouv√©.');
        }

        // V√©rifie si le mot de passe correspond
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).send('Mot de passe incorrect.');
        }

        res.redirect(`/index2.html?firstName=${encodeURIComponent(user.firstName)}`);



        
    } catch (error) {
        console.error(error);
        return res.status(500).send('Erreur du serveur.');
    }
});


const multer = require('multer');
const upload = multer(); // stockage en m√©moire (buffer)

app.post('/send-file', upload.single('file'), async (req, res) => {
  try {
    const { password, recipientEmail } = req.body;
    const file = req.file;

    if (!file || !password || !recipientEmail) {
      return res.status(400).send('Fichier, mot de passe et email destinataire requis');
    }

    // Pr√©parer l'email avec pi√®ce jointe
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipientEmail,
      subject: 'Votre fichier Encryptix crypt√©',
      text: `Bonjour,\n\nVoici votre fichier crypt√©.\nLe mot de passe est : ${password}\n\nBonne journ√©e !`,
      attachments: [
        {
          filename: file.originalname,
          content: file.buffer,
        },
      ],
    };

    // Envoi email
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('Erreur lors de l\'envoi du mail :', error);
        return res.status(500).send('Erreur lors de l\'envoi du mail');
      }
      console.log('Email envoy√© : ' + info.response);
      res.send('Email envoy√© avec succ√®s');
    });

  } catch (error) {
    console.error(error);
    res.status(500).send('Erreur serveur');
  }
});
